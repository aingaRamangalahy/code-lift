import { Response, NextFunction } from "express";
import { asyncHandler } from "@core/middlewares";
import { ExtendedRequest } from "@core/interfaces";
import Container from "typedi";
import {{ className }}Service from "./{{ fileName }}.service";

class {{ className }}Controller {
  private readonly {{ fileName }}Service: {{ className }}Service = Container.get({{ className }}Service);

  constructor() {}

  get{{ className }}s = asyncHandler(
    async (req: ExtendedRequest, res: Response, next: NextFunction) => {
      const response = await this.{{ fileName }}Service.getAll{{ className }}s();
      res.status(200).json(response);
    }
  );

  get{{ className }} = asyncHandler(
    async (req: ExtendedRequest, res: Response, next: NextFunction) => {
      const response = await this.{{ fileName }}Service.get{{ className }}ById(req.params.id);
      res.status(200).json(response);
    }
  );

  create{{ className }} = asyncHandler(
    async (req: ExtendedRequest, res: Response, next: NextFunction) => {
      let response = await this.{{ fileName }}Service.create{{ className }}(req.body);
      res.status(200).json(response);
    }
  );

  update{{ className }} = asyncHandler(
    async (req: ExtendedRequest, res: Response, next: NextFunction) => {
      const response = await this.{{ fileName }}Service.update{{ className }}(
        req.params.id,
        req.body
      );
      res.status(200).json(response);
    }
  );

  delete{{ className }} = asyncHandler(
    async (req: ExtendedRequest, res: Response, next: NextFunction) => {
      let response = await this.{{ fileName }}Service.delete{{ className }}(req.params.id);
      res.status(200).json(response);
    }
  );
}

export default new {{ className }}Controller();
